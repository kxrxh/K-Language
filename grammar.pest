// grammar.pest

// Define token rules
WHITESPACE = _{ " " | "\t" | "\n" | "\r" }

IDENTIFIER = @{ ASCII_ALPHA ~ (ASCII_ALPHANUMERIC | "_")* }
EQUALS     =  { "=" }
DIGIT      =  { '0'..'9' }
boolean    =  { "true" | "false" }
SEMICOLON  =  { ";" }
NUMBER     = @{ int ~ ("." ~ ASCII_DIGIT*)? ~ (^"e" ~ int)? }
int        =  { ("+" | "-")? ~ ASCII_DIGIT+ }
STRING     =  { "\"" ~ (!"\"" ~ ANY)+ ~ "\"" }

OPERATION  = { ADD | SUB | MUL | DIV | MOD | POW | SHIFTL | SHIFTR | EQ }
ADD        = { "+" }
SUB        = { "-" }
MUL        = { "*" }
DIV        = { "/" }
EQ         = { "==" }
POW        = { "^" }
SHIFTL     = { "<<" }
SHIFTR     = { ">>" }
MOD        = { "%" }
INT_TYPE   = { "int" }
FLOAT_TYPE = { "float" }
BOOL_TYPE  = { "bool" }

TYPE = { INT_TYPE | FLOAT_TYPE | BOOL_TYPE }

// Define main grammar rules
program = { SOI ~ STATEMENT* ~ EOI }

STATEMENT = { VAR_DECLARATION ~ SEMICOLON | IF | FUNCTION_DECLARATION | RETURN }

TERM = _{
    IDENTIFIER
  | STRING
  | NUMBER
  | "(" ~ TERM ~ ")"
  | "(" ~ EXPRESSION ~ ")"
}

EXPRESSION = { (TERM ~ (OPERATION ~ TERM)*) | TERM }

VAR_DECLARATION = { "let " ~ IDENTIFIER ~ EQUALS ~ EXPRESSION }

// New rule for if-else branches
IF   = { "if" ~ EXPRESSION ~ "{" ~ STATEMENT* ~ "}" ~ ELSE? }
ELSE = { "else" ~ "{" ~ STATEMENT* ~ "}" }

// New rules for function declarations
FUNCTION_DECLARATION = { "func " ~ IDENTIFIER ~ "(" ~ (IDENTIFIER ~ ("," ~ IDENTIFIER)*)? ~ ")" ~ ("->" ~ TYPE)? ~ FUNCTION_BODY }
FUNCTION_BODY        = { ("{" ~ STATEMENT* ~ "}") | (STATEMENT) }

RETURN = { "return" ~ EXPRESSION? ~ SEMICOLON }
